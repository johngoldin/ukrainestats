---
title: "ukrainestats"
execute:
  echo: false
---

## Process the Russian Casualty and Damage Counts from Ukraine MOD Web Site

The earliest reports that I see from the Ukrainian Ministry of Defense are from April 12, 2022.

```{r}
#| label: libraries
library(tidyverse)
library(glue)
library(xml2)
# library(curl)
```
```{r}
#| label: source-functions
source("ukraine_functions.R")
```




```{r}
#| label: milestones
# create table of dates to show time sequence of the war
milestones <- tibble(
  date = c("2022-04-19","2022-05-08", "2022-05-13", "2022-05-20", 
           "2022-10-01", "2022-07-03", "2022-08-29", "2022-09-06", 
           "2022-11-11", "2022-09-21", "2022-04-04", "2023-03-22",
           "2023-02-13") |> ymd(),
  event = c("Russ attack in east","Siverskyi R fail", "UK counter Kharkiv", "Mariupol Fell",
            "Lyman taken", "UK start Kherson offensive", "Lysychansk fell", "Kharkiv offensive", 
            "UK enter Kharkiv", "Russia partial mobilization", "UK cleared west", "2nd Zelinsky visit to Bakhmut",
            "Vuhledar offensive"),
  short_event = c("Attack","Siverskyi", "Kharkiv", "Mariupol", 
                  "Lymann", "Kherson", "Lysychansk", "Kharkiv", 
                  "Kharkiv", "mobilized", "cleared west", "Bakhmut",
                  "Vuhledar")
) |> arrange(date)
milestones$key_symbol <- letters[1:nrow(milestones)]
milestones <- milestones |> relocate(key_symbol)
milestones$category = "Personnel"
```
```{r}
#| scrape-mod-data
the_dates <-  seq(from = ymd("2022-04-15"), to = ymd("2023-03-15"), by = "1 month") %m+% days(3) # add 3 days to get the 15th of each month
the_dates <- the_dates[!(the_dates %in% uk_df$date)]

the_dates <- seq(from = ymd("2022-04-15"), to = today(), by = "1 day")

additional_date <- seq(from = today() - 15, to = today(), by = "1 day")
abunch <- map_chr(additional_date, fetch_mod_text, .progress = TRUE)
abunch <- abunch[!is.na(abunch)]

# uk_df <- tibble(report = abunch, date = ymd(str_sub(report, start = 1, end = 10)))
if (length(abunch > 0)) {
  uk_additions <- tibble(report = abunch, date = ymd(str_sub(report, start = 1, end = 10)))
  uk_additions <- parse_mod_text(uk_additions)
}
# use overlap_dates to check whether MOD has updated recent daata
overlap_dates <- bind_rows(uk_df |> filter((uk_df$date %in% uk_additions$date)), 
                           uk_additions |> filter(uk_additions$date %in% uk_df$date)) |> 
  arrange(date) |> View()
save_uk__df <- uk_df
uk_df <- bind_rows(uk_df |> filter(!(uk_df$date %in% uk_additions$date)), uk_additions)

uk_df <- uk_df |> mutate(gap = as.numeric(date - lag(date, default = uk_df$date[1] - 1)))



uk2 <-  uk_df |> arrange(date) |> 
  mutate(Personnel = (personnel - lag(personnel)) / gap,
         Tanks = (tanks - lag(tanks)) / gap,
         APV = (apv - lag(apv)) / gap,
         Artillery = (artillery - lag(artillery)) / gap,
         MLRS = (mlrs - lag(mlrs)) / gap,
         Helicopters = (helicopters - lag(helicopters)) / gap,
         Aircraft = (aircraft - lag(aircraft)) / gap)

         
uk3 <-  uk2 %>%
  mutate(across(where(is.numeric), ~ pmax(0, .))) |> 
  mutate(wk = year(date) * 100 + isoweek(date)) 

# uk_weekly <- uk3 |> 
#   group_by(wk) |> 
#   summarise(Tanks = sum(Tanks), APV = sum(APV), Artillery = sum(Artillery),
#             MLRS = sum(MLRS), Helicopters = sum(Helicopters), 
#             Aircraft = sum(Aircraft), Personnel = sum(Personnel),
#             days = n(),
#             date = first(date)) |> 
#   filter(date != min(date, na.rm = TRUE),
#          date != max(date, na.rm = TRUE))
# computer average daily Russian combat losses, by week
uk_weekly <- uk_df  |> arrange(date) |> 
  # isoweek of January 1 is 52, not 1
  mutate(wk = if_else((isoweek(date) > 25) & (month(date) == 1),  year(date) - 1, year(date)) * 100 + isoweek(date)) |> 
  group_by(wk) |> 
  slice_tail(n = 1) |>  # as recommended by GPT
  ungroup() |> 
  mutate(gap = as.numeric(date - lag(date, default = uk_df$date[1] - 1)),
         Personnel = (personnel - lag(personnel)) / gap,
         Tanks = (tanks - lag(tanks)) / gap,
         APV = (apv - lag(apv)) / gap,
         Artillery = (artillery - lag(artillery)) / gap,
         MLRS = (mlrs - lag(mlrs)) / gap,
         Helicopters = (helicopters - lag(helicopters)) / gap,
         Aircraft = (aircraft - lag(aircraft)) / gap)
  

save(uk_df, file = "uk_df.RDat")
```

2022-04-29<p>personnel ‒ about 23000 (+200) persons were liquidated,</p><p>tanks ‒ 986 (+16),</p><p>APV ‒ 2418 (+29),</p><p>artillery systems – 435 (+4),</p><p>MLRS ‒ 151 (+0),</p><p>Anti-aircraft warfare systems ‒ 73 (+1),</p><p>aircraft – 189 (+2),</p><p>helicopters – 155 (+0),</p><p>vehicles ‒ 1695 (+7),</p><p>boats / cutters ‒ 8 (+0),</p><p>fuel tanks ‒ 76 (+0),</p><p>UAV operational-tactical level ‒ 229 (+14).</p><p>special equipment ‒ 31 (+0).</p>

2022-05-29<p>personnel - about 30150 (+150) persons were liquidated,</p><p>tanks ‒ 1338 (+8) од,</p><p>APV ‒ 3270 (+12) од,</p><p>artillery systems – 631 (+3) од,</p><p>MLRS - 203 (+0) од,</p><p>Anti-aircraft warfare systems - 93 (+0) од,</p><p>aircraft – 207 (+0) од,</p><p>helicopters – 174 (+0) од,</p><p>UAV operational-tactical level - 504 (+1),</p><p>cruise missiles - 116 (+0),</p><p>warships / boats - 13 (+0) од,</p><p>vehicles and fuel tanks - 2240 (+14) од,</p><p>special equipment - 48 (+0).</p>

2022-09-29<p class=\"justifyfull\">personnel ‒ about 58580 (+430) persons were liquidated,</p><p class=\"justifyfull\">tanks ‒ 2325 (+13),</p><p class=\"justifyfull\">APV ‒ 4909(+20),</p><p class=\"justifyfull\">artillery systems – 1385 (+4),</p><p class=\"justifyfull\">MLRS – 331 (+0) од,</p><p class=\"justifyfull\">Anti-aircraft warfare systems ‒ 175 (+0),</p><p class=\"justifyfull\">aircraft – 262 (+0),</p><p class=\"justifyfull\">helicopters – 224 (+0),</p><p class=\"justifyfull\">UAV operational-tactical level – 995 (+6),</p><p class=\"justifyfull\">cruise missiles ‒ 246 (+4),</p><p class=\"justifyfull\">warships / boats ‒ 15 (+0),</p><p class=\"justifyfull\">vehicles and fuel tanks – 3751 (+9),</p><p class=\"justifyfull\">special equipment ‒ 131 (+0).</p>

```{r}
#| label: simple-plots

# for_plot <- uk3 |> 
#   pivot_longer(cols = c(Personnel, Tanks, APV, Artillery, MLRS,
#                         Helicopters, Aircraft), 
#                names_to = "category", values_to = "count") |> 
#   mutate(category = factor(category, levels = c("Personnel", "Tanks", "APV",
#                                                 "Artillery", "MLRS", 
#                                                 "Helicopters", "Aircraft")))
# 
# p <- ggplot(data = for_plot, aes(x = date, y = count)) + 
#   geom_smooth(colour = "darkgrey") +
#   geom_point() + 
#   facet_wrap(~ category, ncol = 1, scales = "free_y")

for_plot_wk <- uk_weekly |> 
  pivot_longer(cols = c(Personnel, Tanks, APV, Artillery, MLRS,
                        Helicopters, Aircraft), 
               names_to = "category", values_to = "count")|> 
  mutate(category = factor(category, levels = c("Personnel", "Tanks", "APV",
                                                "Artillery", "MLRS", 
                                                "Helicopters", "Aircraft")))
milestones$category = factor(milestones$category, levels = levels(for_plot_wk$category))

full_milestones <- tidyr::crossing(levels(milestones$category), milestones$date)
pwk <- ggplot(data = for_plot_wk, aes(x = date, y = count)) + 
  # ylim(0, NA) +
  geom_vline(data = tidyr::expand(milestones, category, date), mapping = aes(xintercept = date), colour = "orange") +
  geom_smooth(colour = "darkgrey", span = 0.15) +
  geom_point() + 
  geom_text(data = milestones, aes(label = key_symbol, y = Inf), colour = "orange", vjust = 1, hjust = 0) +
  geom_text(data = milestones, aes(label = short_event, y = Inf), colour = "darkgrey", angle = 90, hjust = 1, vjust = 0) +
  facet_wrap(~ category, ncol = 1, scales = "free_y") +
  ggtitle("Ukranian MOD Reports of Average Daily Russian Losses") + 
  xlab("") + ylab("Average Daily Losses") +
  theme_minimal()
```

